gitについて

・コミット/プッシュ
	コミット・・・変更を加えたファイルをローカルブランチに反映。
		ローカルブランチを切り替えることで、コミットするブランチを選択できる
		作業内容をコミットせず、ブランチを移動するとワーキングツリーの内容が移動先のブランチでも適用される。そのため、基本的にコミットせずにブランチの移動をしてはいけない。競合する可能性がある。
	
	プッシュ・・・ローカルリポジトリ内の対象ブランチに加えた変更をリモートリポジトリの対象ブランチに反映。プッシュ先のブランチを間違えないように注意。
		リモートのmain以外のブランチへプッシュした場合、mainブランチへはgithub内でプルリクエストを行い、マージを行うことで合体できる。

・ローカルリポジトリの最新化
	コミットを行う前にフェッチを行うことで、リモートに対してコミットがあったのかを確認できる
	問題なければプルを行う。これにより、リモートブランチからローカルブランチへ変更が反映される。これはgit fetch + git mergeに等しい
	git pull = = git fetch + git merge



・git ignore
	gitの監視対象から外れるファイルや、ディレクトリを指定できる。
	gitignoreは複数のディレクトリに置くことができ、深い階層のgitignoreが優先される。
	相対パスで記述する
	ex)・ *.out 特定の拡張子を無視
	　 ・sample.log　特定のファイルを無視する
	　 ・/bin/ 特定のディレクトリを無視
	.gitignoreファイルはメモ帳を保存する際に.gitiggnore.で保存すればよい	


gitコマンド
・リモートリポジトリからローカルリポジトリを作成
	git clone <リモートリポジトリのurl>

・ブランチの一覧表示
	git branch


・コミットの打ち消し
	git revert <ハッシュ値>
	指定したコミットを打ち消すコミットをローカルリポジトリ内で行う。つまりプッシュ済みであっても対応できる。

・ブランチの名前変更
	git branch -m <古いブランチ名> <新しいブランチ名>

・ブランチの削除
	git branch -D <ブランチ名>

・コミットの退避
	git stash save 現在変更を加えたファイルを保存し、そのブランチでの変更をなかったことにする
		-u 新規ファイルを含む
	git stash list 退避したファイル（変更）の確認
	git stash pop 現在ﾁｪｯｸｱｳﾄしているブランチに対比された変更を適応

・ブランチの情報
	git status　guiで見れるのであまり使わない

・コミット履歴を表示
	git log --oneline

・別ブランチのコミットを持ってくる
	git cherry-pick<ハッシュ値> 指定したコミットをﾁｪｯｸｱｳﾄしているブランチの直近に行う

・直近のコミットメッセージを変更
	git commit --amend -m "メッセージ"
	
