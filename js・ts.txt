★node.jsとは
	javascript実行環境、クライアント、サーバーどちらでも使用される
	Webサーバーとしての機能を持ち、直接HTTPリクエストを受け取り処理をしてくれる
	Node.jsではJavaScriptでOSの機能にアクセスするプログラムを組むことができる
	ブラウザ上で動作していたときはできなかった自由なファイルの読み書きやネットワーク通信などのOSの機能を扱える

★package.jsonとは
	package.jsonの存在するディレクトリが一つのパッケージ(プロジェクト)の単位となる。

	package-lock.json
		npm install時に自動で作成される
		依存パッケージのバージョンはpackage.jsonに記載できるが、依存パッケージの依存パッケージについては記載できないため、開発メンバー間で差異が出る
		そこでpackage-lock.jsonは依存パッケージの依存パッケージまでバージョンを記憶する

	dependenciesとdevdependencies
		実行環境と開発環境の依存パッケージ。dependenciesに含まれるパッケージは、親パッケージが公開される場合一緒に公開される

	scripts
		コマンドのエイリアスである。npm run <name>で実行できる。何度も実行するようなコマンドはここで登録しておくと効率化できる

	bin
		コマンドのエイリアス(外から使うとき)のようなもの。公開しないのならあまり気にする必要はない。
		外のパッケージへインストールされた場合、./node_modules/.bin/~で指定したコマンドを呼び出す

★npmとは
	npm(ノードパッケージマネージャー) その名のとおりである。cliで操作する
	npm init -y → package.json作成(初期設定)
	npm install 引数なし　→　packagejson内のdependenciesとdevDependenciesを参照してnode_modelsフォルダ（ない場合は作成）にパッケージをインストールする。
	npm install パッケージ名 → packageをインストールし、package.jsonのdependenciesに記載する。基本的にパッケージはこれで管理する。
	npm ci
		package-lock.jsonに記載されたバージョン参照してnpm installを行う。もし、package.jsonの内容と差異があればエラーを出す。
		install時に一度node_modulesの中身を削除するので、クリーンインストールもできる
	npx <実行ファイル> プロジェクトにローカルインストールされたパッケージの実行ファイルを実行可能
	npm run <name>　package.jsonに設定されたscriptを実行

	.npmrcファイル
		自分が所属している組織が所有していて、privateなパッケージをインストールする際に必要なnpmの設定ファイル。
		//npm.pkg.github.com/:_authToken=
		@OWNER:registry=https://npm.pkg.github.
		こんな感じの中身になっている。パッケージのルートディレクトリにおいておけば、npmのインストール時に挙動を変えられる。
			tokenの=にacces tokenを入れる
			@OWNERにパッケージの所有者、registryの=にurlを入れる
	
★javascript
ES6のメソッド記法
	オブジェクトのメンバーとしてメソッドを定義
	ex)
	const myObject = {
	  name: "健太",
	  age: 35,
	  greet() {
	    console.log(`こんにちは、${this.name}と申します。`);
	  }
	};


依存関係
名前付きエクスポート
	1つのモジュール内で複数の要素(変数/関数/クラスなど)をエクスポートできる。
	エクスポートされた名前はインポート時に一致させる必要がある

デフォルトエクスポート export default
	モジュールごとに1つだけエクスポート可能、モジュール全体の「メイン機能」をエクスポートする場合に便利。
      	インポート時に任意の名前を指定できる。	

配列要素の追加とundefined
	jsの配列は可変長である。そのため、要素が3つの配列arrayに対して、array[array.length] = ex　のような形で要素を追加できる
	また、要素が3つの配列に対してarray[4]を指定することもでき、その場合array[3]にはundefinedが格納される。
	undefinedは初期かれていない変数に割り当てられる	

for - in文
	オブジェクトのプロパティを順番に処理する際に使用する。for-of文と同じ
	
	
Mapクラス
	ディクショナリ。キーとバリューをもつ。
	const map = new Map();
	map.set(key, value);
	map.get(key); 取得できない場合はundefinedを返す。!が有効。

・Record型
	typescriptのユーティリティ型の1つ。Record<Keys,Type>の引数に型を入れることでオブジェクトの構造を定義できる。
	すべての値が同じ型を持つオブジェクトを定義するの型定義ツールとして便利。
	ex) 
	const scores: Record<string, number> = {
	  John: 90,
	  Jane: 85,
	  Mike: 95,
	};






