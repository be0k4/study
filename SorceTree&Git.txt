gitについて
・リモートとクローンの同期(リポジトリ作成)
		1.ローカルリポジトリを自分のpcに作成。
			ローカルリポジトリとして指定したディレクトリ内に.gitフォルダと.gitignoreファイルが作成され、このディレクトリ以下のファイルの更新を監視する。
		2.リモートリポジトリをGitHubにて作成。この時gitignoreをUnityに指定するように。
		3.SorceTree内でクローン→リモートリポジトリのURLを入力し、適当な名前を付けてローカルリポジトリと連携させる。
		
		もしくはローカルリポジトリのフォルダ内でgit clone <リモートリポジトリのurl>

	
・コミット/プッシュ
	コミット・・・変更を加えたファイルをローカルブランチに反映。
		ローカルブランチを切り替えることで、コミットするブランチを選択できる
		作業内容をコミットせず、ブランチを移動するとワーキングツリーの内容が移動先のブランチでも適用される。そのため、基本的にコミットせずにブランチの移動をしてはいけない。競合する可能性がある。
	
	プッシュ・・・ローカルリポジトリ内の対象ブランチに加えた変更をリモートリポジトリの対象ブランチに反映。プッシュ先のブランチを間違えないように注意。
		リモートのmain以外のブランチへプッシュした場合、mainブランチへはgithub内でプルリクエストを行い、マージを行うことで合体できる。

・ローカルリポジトリの最新化
	コミットを行う前にフェッチを行うことで、リモートに対してコミットがあったのかを確認できる
	問題なければプルを行う。これにより、リモートブランチからローカルブランチへ変更が反映される。これはgit fetch + git mergeに等しい
	git pull = = git fetch + git merge

・ブランチの作成/切り替え
	ブランチ→作成
	ブランチをダブルクリックで切り替え

・コミットの上書き(修正)
	リモートにプッシュ前に可能 git --amend
	［コミット オプション］から［直前のコミットを上書き］にチェックを入れることで、コミットの修正ができる


gitコマンド
・ブランチの一覧表示
	git branch

・コミットの打ち消し
	git revert <ハッシュ値>
	指定したコミットを打ち消すコミットをローカルリポジトリ内で行う。つまりプッシュ済みであっても対応できる。

・ブランチの削除
	git branch -D <ブランチ名>

・コミットの退避
	git stash save 現在変更を加えたファイルを保存し、そのブランチでの変更をなかったことにする
	git stash list 退避したファイル（変更）の確認
	git stash pop 現在ﾁｪｯｸｱｳﾄしているブランチに対比された変更を適応

・ブランチの情報
	git status　guiで見れるのであまり使わない

・コミット履歴を表示
	git log --oneline

・別ブランチのコミットを持ってくる
git cherry-pick<ハッシュ値> 指定したコミットをﾁｪｯｸｱｳﾄしているブランチの直近に行う

	